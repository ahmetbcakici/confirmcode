{"version":3,"sources":["ConfirmCode.js","App.js","serviceWorker.js","index.js"],"names":["ConfirmCode","useState","editing","setEditing","editingIndex","setEditingIndex","boxes","setBoxes","handler","e","keyCode","filter","item","index","length","code","includes","keyEntered","String","fromCharCode","tempArray","className","style","background","useEffect","window","addEventListener","removeEventListener","submit","isEditing","target","alert","join","map","key","fontSize","padding","borderRadius","marginRight","cursor","onClick","Array","fill","App","confirmPage","setConfirmPage","type","value","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gOA8FeA,MA5Ff,WAAwB,IAAD,EACSC,oBAAS,GADlB,mBACdC,EADc,KACLC,EADK,OAEmBF,mBAAS,GAF5B,mBAEdG,EAFc,KAEAC,EAFA,OAGKJ,mBAAS,IAHd,mBAGdK,EAHc,KAGPC,EAHO,KAmBrB,SAASC,EAAQC,GAQf,GAPkB,IAAdA,EAAEC,SACJH,EACED,EAAMK,QAAO,SAACC,EAAMC,GAClB,GAAIA,GAASP,EAAMQ,OAAS,EAAG,OAAOF,SAIvCH,EAAEM,KAAKC,SAAS,UAAaV,EAAMQ,QAAU,IAAMZ,GAAxD,CACA,IAAIe,EAAaC,OAAOC,aAAaV,EAAEC,SACvC,GAAIR,EAAS,CACX,IAAIkB,EAAS,YAAOd,GAKpB,OAJAc,EAAUhB,EAAaiB,WAAaJ,EACpCV,EAASa,GACTjB,GAAW,QACXC,EAAakB,MAAMC,WAAa,WAIlChB,EAAS,GAAD,mBAAKD,GAAL,CAAYW,MAjCtBO,qBAAU,WAGR,OAFAC,OAAOC,iBAAiB,UAAWlB,GAE5B,WACLiB,OAAOE,oBAAoB,UAAWnB,OAI1CgB,qBAAU,WACa,IAAjBlB,EAAMQ,QACRc,MAED,CAACtB,IAwBJ,IAAMuB,EAAY,SAACpB,GACjBA,EAAEqB,OAAOR,MAAMC,WAAa,UAC5BlB,EAAgBI,EAAEqB,QAClB3B,GAAW,IAGPyB,EAAS,WACbG,MAAM,SAAD,OAAUzB,EAAM0B,KAAK,IAArB,0BAGP,OACE,2BACG1B,EAAM2B,KAAI,SAACrB,EAAMC,GAAP,OACT,0BACEqB,IAAKrB,EACLQ,UAAWR,EACXS,MAAO,CACLa,SAAS,SACTC,QAAS,EACTb,WAAW,UACXc,aAAa,MACbC,YAAa,EACbC,OAAQ,WAEVC,QAASX,GAERjB,MAGJ,IAAI6B,MAAM,GAAGC,KAAK,IAAIT,KAAI,SAACrB,EAAMC,GAChC,OAAIP,EAAMO,GAAe,KAEvB,0BACEqB,IAAKrB,EACLS,MAAO,CACLa,SAAS,SACTC,QAAS,EACTb,WAAW,UACXc,aAAa,MACbC,YAAa,EACbC,OAAQ,YARZ,iB,MCjDKI,MAtBf,WAAgB,IAAD,EACyB1C,oBAAS,GADlC,mBACN2C,EADM,KACOC,EADP,KAEb,OAAID,EAEA,yBAAKvB,UAAU,OACb,6BACA,6BACA,kBAAC,EAAD,OAIJ,yBAAKA,UAAU,OACb,2BAAOyB,KAAK,SACZ,2BAAOA,KAAK,SACZ,2BAAOA,KAAK,SAASC,MAAM,MAAMP,QAAS,kBAAMK,GAAe,QCNjDG,QACW,cAA7BvB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.aac0b207.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\n\nfunction ConfirmCode() {\n  const [editing, setEditing] = useState(false);\n  const [editingIndex, setEditingIndex] = useState(0);\n  const [boxes, setBoxes] = useState([]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handler);\n\n    return () => {\n      window.removeEventListener('keydown', handler);\n    };\n  });\n\n  useEffect(() => {\n    if (boxes.length === 5) {\n      submit();\n    }\n  }, [boxes]);\n\n  function handler(e) {\n    if (e.keyCode === 8) {\n      setBoxes(\n        boxes.filter((item, index) => {\n          if (index != boxes.length - 1) return item;\n        })\n      );\n    }\n    if (!e.code.includes('Digit') || (boxes.length >= 5 && !editing)) return;\n    let keyEntered = String.fromCharCode(e.keyCode);\n    if (editing) {\n      let tempArray = [...boxes];\n      tempArray[editingIndex.className] = keyEntered;\n      setBoxes(tempArray);\n      setEditing(false);\n      editingIndex.style.background = '#F5F5F5';\n      return;\n    }\n\n    setBoxes([...boxes, keyEntered]);\n  }\n\n  const isEditing = (e) => {\n    e.target.style.background = '#ececec';\n    setEditingIndex(e.target);\n    setEditing(true);\n  };\n\n  const submit = () => {\n    alert(`Code (${boxes.join('')}) has sent to server`);\n  };\n\n  return (\n    <p>\n      {boxes.map((item, index) => (\n        <span\n          key={index}\n          className={index}\n          style={{\n            fontSize:'1.5rem',\n            padding: 7,\n            background:'#F5F5F5',\n            borderRadius:'5px',\n            marginRight: 5,\n            cursor: 'pointer',\n          }}\n          onClick={isEditing}\n        >\n          {item}\n        </span>\n      ))}\n      {new Array(5).fill('').map((item, index) => {\n        if (boxes[index]) return null;\n        return (\n          <span\n            key={index}\n            style={{\n              fontSize:'1.5rem',\n              padding: 7,\n              background:'#F5F5F5',\n              borderRadius:'5px',\n              marginRight: 5,\n              cursor: 'pointer',\n            }}\n          >\n            &nbsp;&nbsp;\n          </span>\n        );\n      })}\n    </p>\n  );\n}\n\nexport default ConfirmCode;\n","import React, {useState} from 'react';\nimport ConfirmCode from './ConfirmCode';\nimport './App.css';\n\nfunction App() {\n  const [confirmPage, setConfirmPage] = useState(true);\n  if (confirmPage)\n    return (\n      <div className=\"App\">\n        <br />\n        <br />\n        <ConfirmCode />\n      </div>\n    );\n  return (\n    <div className=\"App\">\n      <input type=\"text\" />\n      <input type=\"text\" />\n      <input type=\"button\" value=\"gir\" onClick={() => setConfirmPage(true)} />\n      {/*  <div style={{display:confirmPage ? 'block' :'none'}}>\n        <ConfirmCode/>\n      </div> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport ConfirmCode from './ConfirmCode';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}